<div class="parent map-text vertical-align-parent">
  <div class="child vertical-align-child">
    <p class="wf-mplus1p main_text" style="font-weight:500;">練習場所がない！</p>
    <p class="wf-mplus1p sub_text">そんな人のために、全国の卓球場情報を集約</p>
    <button type="button" id="current_pos_btn" class="btn btn-danger">現在地から検索</button>
    <div class="twitter_div">
      <p class="wf-mplus1p sub_text">SNSでシェア</p>
      <p><a href="https://twitter.com/share" class="twitter-share-button" data-url="https://takkyuumap.com" data-text="全国450以上のの卓球場情報を集約した「卓球マップ」、現在地や地名から検索も！" data-hashtags="卓球マップ">Tweet</a></p>
    </div>
  </div>
</div>

<div class="map-parent vertical-align-parent">
  <div class="vertical-align-child">
    <input id="pac-input" class="controls" type="text" placeholder="地名で検索" style="width:60%;">
    <div id="map" class="map_map"></div>
  </div>
</div>

<div class="mobile_twitter_div text-center">
  <p class="wf-mplus1p sub_text">SNSでシェア</p>
  <p><a href="https://twitter.com/share" class="twitter-share-button" data-url="https://takkyuumap.com" data-text="全国450以上のの卓球場情報を集約した「卓球マップ」、現在地や地名から検索も！" data-hashtags="卓球マップ">Tweet</a></p>
</div>

<script type="text/javascript">

  var tkj_places = <%=raw @places.to_json %>;
  var map;

  //トップの現在地検索から来た場合、現在地に飛ぶ
  if(<%= @get_current.present? %>){
    currentLocation();
  }
  //現在地ボタンを押した場合現在地に飛ぶ
  $("#current_pos_btn").click(currentLocation);

  //トップの地名検索から来た場合
  <% if @search_latlng.present? %>
    var initial_center = {lat: <%= @search_latlng["lat"] %>, lng: <%= @search_latlng["lng"] %>};
    var initial_zoom = 13;
  <% else %>
    var initial_center = {lat: 38.5, lng: 132.5};
    var initial_zoom = 5;
  <% end %>

  //マップ作成
  function initAutocomplete() {

    map = new google.maps.Map(document.getElementById('map'), {
      center: initial_center,
      zoom: initial_zoom,
      mapTypeId: 'roadmap',
      mapTypeControl: false
    });

    <% if @search_latlng.present? %>
      var marker = new google.maps.Marker({
        icon: '/assets/current_position.png',
        position: initial_center,
        map: map
      });
    <% end %>

		//各マーカーのinfowindow定義
		var infowindow = new google.maps.InfoWindow();

    //検索ボックス作成(Create the search box and link it to the UI element.)
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		var service = new google.maps.places.PlacesService(map);
    var markers = [];


		// Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
		//検索を待つ
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();
      if (places.length == 0) {
        return;
      }

      // For each place, get the name and location.
      var bounds = new google.maps.LatLngBounds();
      map.fitBounds(bounds);
      places.forEach(function(place) {
        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });

    var markers = [];
    for (i = 0; i < tkj_places.length; i++) {
      var latLng = new google.maps.LatLng(tkj_places[i].latitude, tkj_places[i].longitude);
      var marker = new google.maps.Marker({'position': latLng});var marker = new google.maps.Marker({
        position: latLng,
        map: map,
        title: tkj_places[i].title
      });
			google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          infowindow.setContent('<div id="content">' + tkj_places[i].title + '<br>' + '<a href = /places/' + tkj_places[i].id + '>詳細</a>' + '<br>' + '<a href = https://google.com/maps/place/' + tkj_places[i].title + '>Googleマップで開く</a>' + '</div>');
          infowindow.open(map, marker);
        };
      })(marker, i));
      markers.push(marker);
		}
    var mcOptions = {maxZoom: 9, imagePath: '/assets/images/m', minimumClusterSize: 4};
    var markerCluster = new MarkerClusterer(map, markers, mcOptions);
    setTimeout(function(){google.maps.event.trigger(map, 'resize');}, 900);
  }

  //現在地特定
  function currentLocation() {
    //現在地マーカー作成
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        var marker = new google.maps.Marker({
          icon: '/assets/current_position.png',
          position: pos,
          map: map
        });
        map.setCenter(pos);
        map.setZoom(13);
      }, function() {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
  };

</script>

<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA1UBETjFq1eApVpLAX-JdAz3tsHf7Bpsc&libraries=places&callback=initAutocomplete">
</script>
